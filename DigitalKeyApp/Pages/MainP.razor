@page "/MainP"
@inject NavigationManager NavigationManager

<style>
    h1 {
        text-align: center;
        color: #fff;
        font-weight: bolder;
        font-size: 90px;
    }

    h3 {
        text-align: center;
        color: #fff;
        font-weight: bolder;
    }

    button {
        justify-content: center;
    }

    p {
        color: #fff;
        font-size: 12px;
    }

    .centered-paragraph {
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translate(-50%, 550%);
        white-space: nowrap;
    }

    .footer-container {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
    }

    .button-center {
        text-align: center;
    }
    /* YourComponent.razor.css (or any other custom CSS file) */
    .outlined-button {
        background-color: transparent;
        border: 2px solid #ced4da; /* Replace #007bff with the desired border color */
        color: #ced4da; /* Replace #007bff with the desired text color */
        border-radius: 20px; /* Optional: Add border radius for rounded corners */
        padding: 8px 16px; /* Optional: Add padding to adjust button size */
    }

    .button-bottom-right {
        text-align: right;
    }

    .outlined-button {
        background-color: transparent;
        border: 2px solid #ced4da; /* Replace #007bff with the desired border color */
        color: #ced4da; /* Replace #007bff with the desired text color */
        border-radius: 20px; /* Optional: Add border radius for rounded corners */
        padding: 8px 16px; /* Optional: Add padding to adjust button size */
        margin: 5px; /* Optional: Add some spacing between the buttons */
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .locking-message,
    .unlocking-message {
        color: #fff;
        font-size: 24px;
        text-align: center;
        margin: 10px 0;
    }

    /* Styles for success messages */
    .success-message {
        color: green;
        font-size: 24px;
        text-align: center;
        margin: 10px 0;
    }
    </style>

<h3>ROOM:</h3>
<h1>202</h1>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="d-flex justify-content-center my-3">
                <img src="/logohotel.png" width="200" class="img-responsive" />
            </div>
        </div>
    </div>
</div>

<div class="button-container">
    <button @onclick="Lock" class="btn outlined-button">Lock</button>
    <button @onclick="Unlock" class="btn outlined-button">Unlock</button>
</div>

<!-- Display the locking status message -->
@if (isLoadingLock)
{
    <p class="locking-message">Locking...</p>
}

<!-- Display the unlocking status message -->
@if (isLoadingUnlock)
{
    <p class="unlocking-message">Unlocking...</p>
}

<!-- Display the success message for locking -->
@if (isLocked)
{
    <p class="success-message">You have successfully locked the hotel room door!</p>
}

<!-- Display the success message for unlocking -->
@if (isUnlocked)
{
    <p class="success-message">You have successfully unlocked the hotel room door!</p>
}

<div class="button-bottom-right">
    <button @onclick="GoBack" class="btn outlined-button">Go Back</button>
</div>

<div class="container">
    <div class="col">
        <p class="centered-paragraph">For any problems or questions, please contact the reception.</p>
    </div>
</div>


<div class="footer-container">
    <div class="container">
        <div class="col">
            <p class="centered-paragraph">For any problems or questions, please contact the reception.</p>
        </div>
    </div>
</div>

@code {
    private bool isLocked = false;
    private bool isLoadingLock = false;
    private bool isUnlocked = false;
    private bool isLoadingUnlock = false;
    private bool showLockSuccess = false;
    private bool showUnlockSuccess = false;

    private void GoBack()
    {
        // Handle the "Go Back" button click here
        // Navigate back to the previous page ("/" page)
        NavigationManager.NavigateTo("/");
    }

    private async Task Lock()
    {
        // Show the "Locking..." message
        isLoadingLock = true;

        // Simulate the locking process with a delay (1-2 seconds)
        await Task.Delay(2000); // Adjust the delay time as needed (2000ms = 2 seconds)

        // Lock the device by setting isLocked to true
        isLocked = true;
        isLoadingLock = false; // Hide the "Locking..." message

        // Show the success message for locking
        showLockSuccess = true;

        // Hide the success message after a short delay (2 seconds)
        await Task.Delay(2000); // Adjust the delay time as needed (2000ms = 2 seconds)
        showLockSuccess = false;
    }

    private async Task Unlock()
    {
        // Show the "Unlocking..." message
        isLoadingUnlock = true;

        // Simulate the unlocking process with a delay (1-2 seconds)
        await Task.Delay(2000); // Adjust the delay time as needed (2000ms = 2 seconds)

        // Unlock the device by setting isUnlocked to true
        isUnlocked = true;
        isLoadingUnlock = false; // Hide the "Unlocking..." message

        // Show the success message for unlocking
        showUnlockSuccess = true;

        // Hide the success message after a short delay (2 seconds)
        await Task.Delay(2000); // Adjust the delay time as needed (2000ms = 2 seconds)
        showUnlockSuccess = false;
    }
}


